# src/bot/handlers/warehouse.py

from typing import Optional, List
from datetime import datetime, timezone
from decimal import Decimal
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from ...services import (
    InventoryService, BunkerService, BagService,
    SupplierService
)
from ...db.database import get_db
from ...db.schemas import (
    InventoryMovementCreate, BunkerWeighingCreate,
    BagItemCreate
)
from ..keyboards import warehouse as kb
from ..utils import require_role, photo_handler
from ...utils.storage import StorageService

router = Router()


class WarehouseStates(StatesGroup):
    # –ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–∞
    receiving_select_supplier = State()
    receiving_select_ingredient = State()
    receiving_weighing = State()
    receiving_photo = State()
    
    # –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –±—É–Ω–∫–µ—Ä–æ–≤
    bunker_select = State()
    bunker_ingredient = State()
    bunker_weighing = State()
    bunker_photo = State()
    
    # –°–±–æ—Ä–∫–∞ —Å—É–º–æ–∫
    bag_creation = State()
    bag_adding_items = State()
    bag_item_type = State()
    bag_item_details = State()
    
    # –í—ã–¥–∞—á–∞/–≤–æ–∑–≤—Ä–∞—Ç
    issue_select_operator = State()
    issue_confirm = State()
    return_process = State()
    
    # –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
    inventory_location = State()
    inventory_counting = State()


@router.message(Command("warehouse"))
@require_role("warehouse")
async def warehouse_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞"""
    await state.clear()
    await message.answer(
        "üì¶ –ú–µ–Ω—é —Å–∫–ª–∞–¥–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.warehouse_main_menu()
    )


# === –û–°–¢–ê–¢–ö–ò ===

@router.callback_query(F.data == "wh_stock")
@require_role("warehouse")
async def show_stock_summary(
    callback: CallbackQuery,
    session: AsyncSession
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    await callback.answer()
    
    service = InventoryService()
    summary = await service.get_warehouse_summary(session)
    
    text = "üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b>\n\n"
    
    for category, ingredients in summary.items():
        text += f"<b>{category}:</b>\n"
        for ing in ingredients:
            text += f"‚Ä¢ {ing['name']}: {ing['quantity']:.1f} {ing['unit']}\n"
        text += "\n"
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
    critical = await service.get_critical_stock(session)
    if critical:
        text += "‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:</b>\n"
        for item in critical:
            text += f"‚Ä¢ {item['name']}: {item['quantity']:.1f} {item['unit']} "
            text += f"(–º–∏–Ω: {item['min_quantity']})\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.stock_actions_menu(),
        parse_mode="HTML"
    )


# === –ü–†–ò–ï–ú–ö–ê –¢–û–í–ê–†–ê ===

@router.callback_query(F.data == "wh_receive")
@require_role("warehouse")
async def start_receiving(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–ù–∞—á–∞—Ç—å –ø—Ä–∏–µ–º–∫—É —Ç–æ–≤–∞—Ä–∞"""
    await callback.answer()
    await state.set_state(WarehouseStates.receiving_select_supplier)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    service = SupplierService()
    suppliers = await service.get_list(
        db=session,
        filters={'is_active': True}
    )
    
    if not suppliers:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
            reply_markup=kb.back_to_warehouse_menu()
        )
        return
    
    await callback.message.edit_text(
        "üöö <b>–ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:",
        reply_markup=kb.suppliers_list(suppliers),
        parse_mode="HTML"
    )


@router.callback_query(
    F.data.startswith("supplier_"),
    WarehouseStates.receiving_select_supplier
)
@require_role("warehouse")
async def select_supplier(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    supplier_id = int(callback.data.split("_")[1])
    await state.update_data(supplier_id=supplier_id)
    await state.set_state(WarehouseStates.receiving_select_ingredient)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    # TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    
    await callback.message.edit_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∫–∏:",
        reply_markup=kb.ingredients_list([]),  # TODO: –ø–µ—Ä–µ–¥–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        parse_mode="HTML"
    )


@router.callback_query(
    F.data.startswith("ingredient_"),
    WarehouseStates.receiving_select_ingredient
)
@require_role("warehouse")
async def select_ingredient(
    callback: CallbackQuery,
    state: FSMContext
):
    """–í—ã–±–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
    ingredient_id = int(callback.data.split("_")[1])
    await state.update_data(ingredient_id=ingredient_id)
    await state.set_state(WarehouseStates.receiving_weighing)
    
    await callback.message.answer(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:"
    )


@router.message(
    WarehouseStates.receiving_weighing,
    F.text.regexp(r"^\d+\.?\d*$")
)
@require_role("warehouse")
async def receive_weight(
    message: Message,
    state: FSMContext
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞"""
    weight = float(message.text)
    await state.update_data(quantity=weight)
    await state.set_state(WarehouseStates.receiving_photo)
    
    await message.answer(
        "üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∫–ª–∞–¥–Ω—É—é"
    )


@router.message(
    WarehouseStates.receiving_photo,
    F.content_type == ContentType.PHOTO
)
@require_role("warehouse")
async def receive_photo(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    storage: StorageService
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–∏–µ–º–∫–∏"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_url = await photo_handler.save_photo(
        message.photo[-1],
        folder="receiving",
        storage=storage
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    service = InventoryService()
    movement = await service.create_inventory_movement(
        db=session,
        movement_data=InventoryMovementCreate(
            ingredient_id=data['ingredient_id'],
            from_location_type=None,
            from_location_id=None,
            to_location_type='warehouse',
            to_location_id=1,  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥
            quantity=data['quantity'],
            reason='receiving',
            reference_type='purchase',
            reference_id=data.get('purchase_id')
        ),
        current_user_id=message.from_user.id,
        photo_url=photo_url
    )
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç!\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']} –µ–¥–∏–Ω–∏—Ü",
        reply_markup=kb.back_to_warehouse_menu()
    )


# === –í–ó–í–ï–®–ò–í–ê–ù–ò–ï –ë–£–ù–ö–ï–†–û–í ===

@router.callback_query(F.data == "wh_bunkers")
@require_role("warehouse")
async def bunkers_menu(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –±—É–Ω–∫–µ—Ä–∞–º–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "üè∫ <b>–†–∞–±–æ—Ç–∞ —Å –±—É–Ω–∫–µ—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.bunkers_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "bunker_weigh")
@require_role("warehouse")
async def start_bunker_weighing(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–ù–∞—á–∞—Ç—å –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞"""
    await state.set_state(WarehouseStates.bunker_select)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç—ã–µ –±—É–Ω–∫–µ—Ä—ã
    service = BunkerService()
    bunkers = await service.get_bunkers_by_status(
        db=session,
        status='empty'
    )
    
    if not bunkers:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É—Å—Ç—ã—Ö –±—É–Ω–∫–µ—Ä–æ–≤",
            reply_markup=kb.back_to_warehouse_menu()
        )
        return
    
    await callback.message.edit_text(
        "üè∫ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä –¥–ª—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:",
        reply_markup=kb.bunkers_list(bunkers),
        parse_mode="HTML"
    )


@router.callback_query(
    F.data.startswith("bunker_"),
    WarehouseStates.bunker_select
)
@require_role("warehouse")
async def select_bunker_for_weighing(
    callback: CallbackQuery,
    state: FSMContext
):
    """–í—ã–±–æ—Ä –±—É–Ω–∫–µ—Ä–∞"""
    bunker_id = int(callback.data.split("_")[1])
    await state.update_data(bunker_id=bunker_id)
    await state.set_state(WarehouseStates.bunker_ingredient)
    
    await callback.message.edit_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=kb.ingredients_list([]),  # TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        parse_mode="HTML"
    )


@router.callback_query(
    F.data.startswith("ingredient_"),
    WarehouseStates.bunker_ingredient
)
@require_role("warehouse")
async def select_bunker_ingredient(
    callback: CallbackQuery,
    state: FSMContext
):
    """–í—ã–±–æ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –¥–ª—è –±—É–Ω–∫–µ—Ä–∞"""
    ingredient_id = int(callback.data.split("_")[1])
    await state.update_data(ingredient_id=ingredient_id)
    await state.set_state(WarehouseStates.bunker_weighing)
    
    await callback.message.answer(
        "‚öñÔ∏è –í–∑–≤–µ—Å—å—Ç–µ –±—É–Ω–∫–µ—Ä —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ë–†–£–¢–¢–û (–∫–≥):"
    )


@router.message(
    WarehouseStates.bunker_weighing,
    F.text.regexp(r"^\d+\.?\d*$")
)
@require_role("warehouse")
async def receive_bunker_weight(
    message: Message,
    state: FSMContext
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –±—É–Ω–∫–µ—Ä–∞"""
    gross_weight = float(message.text)
    await state.update_data(gross_weight=gross_weight)
    await state.set_state(WarehouseStates.bunker_photo)
    
    await message.answer(
        "üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –±—É–Ω–∫–µ—Ä"
    )


@router.message(
    WarehouseStates.bunker_photo,
    F.content_type == ContentType.PHOTO
)
@require_role("warehouse")
async def receive_bunker_photo(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    storage: StorageService
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –±—É–Ω–∫–µ—Ä–∞"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_url = await photo_handler.save_photo(
        message.photo[-1],
        folder=f"bunkers/{data['bunker_id']}/weighing",
        storage=storage
    )
    
    # –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞
    service = BunkerService()
    weighing = await service.weigh_bunker(
        db=session,
        bunker_id=data['bunker_id'],
        weighing_data=BunkerWeighingCreate(
            ingredient_id=data['ingredient_id'],
            gross_weight=data['gross_weight']
        ),
        current_user=message.from_user,
        photo_url=photo_url
    )
    
    await state.clear()
    
    text = "‚úÖ <b>–ë—É–Ω–∫–µ—Ä –≤–∑–≤–µ—à–µ–Ω!</b>\n\n"
    text += f"‚öñÔ∏è –í–µ—Å –±—Ä—É—Ç—Ç–æ: {weighing.gross_weight:.1f} –∫–≥\n"
    text += f"üì¶ –í–µ—Å –Ω–µ—Ç—Ç–æ: {weighing.net_weight:.1f} –∫–≥\n"
    
    await message.answer(
        text,
        reply_markup=kb.back_to_warehouse_menu(),
        parse_mode="HTML"
    )


# === –°–ë–û–†–ö–ê –°–£–ú–û–ö ===

@router.callback_query(F.data == "wh_bags")
@require_role("warehouse")
async def bags_menu(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Å—É–º–∫–∞–º–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "üëú <b>–†–∞–±–æ—Ç–∞ —Å —Å—É–º–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.bags_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "bag_create")
@require_role("warehouse")
async def start_bag_creation(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É —Å—É–º–∫–∏"""
    # TODO: –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—É–º–∫–∏
    await state.set_state(WarehouseStates.bag_creation)
    
    await callback.message.edit_text(
        "üëú <b>–°–±–æ—Ä–∫–∞ —Å—É–º–∫–∏-–∫–æ–º–ø–ª–µ–∫—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å—É–º–∫–∞:",
        reply_markup=kb.tasks_list([]),  # TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏
        parse_mode="HTML"
    )


@router.callback_query(F.data == "bag_add_item")
@require_role("warehouse")
async def add_item_to_bag(
    callback: CallbackQuery,
    state: FSMContext
):
    """–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—É–º–∫—É"""
    await state.set_state(WarehouseStates.bag_item_type)
    
    await callback.message.answer(
        "–ß—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É–º–∫—É?",
        reply_markup=kb.bag_item_types()
    )


@router.callback_query(
    F.data.in_(["item_bunker", "item_ingredient", "item_other"]),
    WarehouseStates.bag_item_type
)
@require_role("warehouse")
async def select_item_type(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    item_type = callback.data.replace("item_", "")
    await state.update_data(item_type=item_type)
    await state.set_state(WarehouseStates.bag_item_details)
    
    if item_type == "bunker":
        # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –±—É–Ω–∫–µ—Ä—ã
        service = BunkerService()
        bunkers = await service.get_bunkers_by_status(
            db=session,
            status='filled'
        )
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–Ω–∫–µ—Ä:",
            reply_markup=kb.bunkers_list(bunkers)
        )
        
    elif item_type == "ingredient":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:",
            reply_markup=kb.ingredients_list([])  # TODO
        )
        
    else:
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:"
        )


# === –í–´–î–ê–ß–ê –°–£–ú–û–ö ===

@router.callback_query(F.data == "bag_issue")
@require_role("warehouse")
async def start_bag_issue(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–ù–∞—á–∞—Ç—å –≤—ã–¥–∞—á—É —Å—É–º–∫–∏"""
    await state.set_state(WarehouseStates.issue_select_operator)
    
    # TODO: –ø–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    operators = []
    
    await callback.message.edit_text(
        "üë∑ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏:",
        reply_markup=kb.operators_list(operators),
        parse_mode="HTML"
    )


# === –í–û–ó–í–†–ê–¢ ===

@router.callback_query(F.data == "wh_returns")
@require_role("warehouse")
async def start_returns(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –ø—Ä–∏–µ–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"""
    await state.set_state(WarehouseStates.return_process)
    
    await callback.message.edit_text(
        "üì• <b>–ü—Ä–∏–µ–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤</b>\n\n"
        "–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:",
        parse_mode="HTML"
    )


# === –û–¢–ß–ï–¢–´ ===

@router.callback_query(F.data == "wh_reports")
@require_role("warehouse")
async def warehouse_reports_menu(
    callback: CallbackQuery
):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ —Å–∫–ª–∞–¥–∞"""
    await callback.answer()
    await callback.message.edit_text(
        "üìä <b>–û—Ç—á–µ—Ç—ã —Å–∫–ª–∞–¥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç:",
        reply_markup=kb.reports_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "report_movements")
@require_role("warehouse")
async def show_movements_report(
    callback: CallbackQuery,
    session: AsyncSession
):
    """–û—Ç—á–µ—Ç –ø–æ –¥–≤–∏–∂–µ–Ω–∏—è–º"""
    service = InventoryService()
    movements = await service.get_recent_movements(
        db=session,
        location_type='warehouse',
        limit=20
    )
    
    text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
    
    for movement in movements:
        direction = "‚û°Ô∏è" if movement.to_location_type == 'warehouse' else "‚¨ÖÔ∏è"
        text += f"{direction} {movement.ingredient.name}: "
        text += f"{movement.quantity} {movement.ingredient.unit}\n"
        text += f"   {movement.created_at.strftime('%d.%m %H:%M')}\n"
        text += f"   {movement.reason}\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.back_to_warehouse_menu(),
        parse_mode="HTML"
    )


# === –û–¢–ú–ï–ù–ê ===

@router.callback_query(F.data == "cancel")
async def cancel_operation(
    callback: CallbackQuery,
    state: FSMContext
):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await warehouse_menu(callback.message, state)