from datetime import datetime, date, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from src.bot.keyboards.inline import MenuKeyboards
from src.services.user import UserService
from src.services.machine import MachineService
from src.services.finance import FinanceService
from src.services.task import TaskService
from src.core.permissions import require_role
from src.db.models.user import User, Role
from src.db.models.machine import Machine, MachineStatus
from src.db.models.finance import FinanceTransaction
from src.db.models.route import MachineTask, TaskStatus

router = Router()


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    waiting_for_user_search = State()
    waiting_for_role_assignment = State()
    waiting_for_broadcast_message = State()
    waiting_for_backup_confirmation = State()


@router.callback_query(F.data == "admin:panel")
@require_role(["admin"])
async def show_admin_panel(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users_count = await session.execute(select(func.count(User.id)))
    users_count = users_count.scalar()
    
    machines_count = await session.execute(select(func.count(Machine.id)))
    machines_count = machines_count.scalar()
    
    today_sales = await session.execute(
        select(func.count()).select_from(FinanceTransaction).where(
            FinanceTransaction.action_timestamp >= date.today()
        )
    )
    today_sales = today_sales.scalar()
    
    text = f"""
‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üè™ –ê–≤—Ç–æ–º–∞—Ç–æ–≤: {machines_count}
üí∞ –ü—Ä–æ–¥–∞–∂ —Å–µ–≥–æ–¥–Ω—è: {today_sales}

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
    """
    
    keyboard = MenuKeyboards.admin_panel()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin:users")
@require_role(["admin"])
async def manage_users(callback: CallbackQuery, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> - –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω—É
‚Ä¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b> - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
‚Ä¢ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</b> - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    """
    
    keyboard = MenuKeyboards.user_management()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin:users:list")
@require_role(["admin"])
async def list_users(callback: CallbackQuery, session: AsyncSession):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_service = UserService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from src.db.schemas.user import UserFilter
    users, total = await user_service.get_users_list(
        UserFilter(limit=10)
    )
    
    text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n–í—Å–µ–≥–æ: {total}\n\n"
    
    for user in users:
        roles = ", ".join([r.name for r in user.roles])
        status = "‚úÖ" if user.is_active else "‚ùå"
        text += f"{status} <b>{user.full_name}</b>\n"
        text += f"   @{user.username or '–Ω–µ—Ç'} | {roles or '–±–µ–∑ —Ä–æ–ª–µ–π'}\n\n"
    
    keyboard = MenuKeyboards.users_list_actions()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin:users:search")
@require_role(["admin"])
async def start_user_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(AdminStates.waiting_for_user_search)
    
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è, username, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    await callback.answer()


@router.message(AdminStates.waiting_for_user_search)
@require_role(["admin"])
async def process_user_search(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    search_query = message.text.strip()
    
    user_service = UserService(session)
    from src.db.schemas.user import UserFilter
    
    users, total = await user_service.get_users_list(
        UserFilter(search=search_query, limit=20)
    )
    
    if not users:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=MenuKeyboards.back_button("admin:users")
        )
        await state.clear()
        return
    
    text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> –Ω–∞–π–¥–µ–Ω–æ {total}\n\n"
    
    for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
        roles = ", ".join([r.name for r in user.roles])
        text += f"üë§ <b>{user.full_name}</b> (ID: {user.id})\n"
        text += f"   @{user.username or '–Ω–µ—Ç'} | {user.phone or '–Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\n"
        text += f"   –†–æ–ª–∏: {roles or '–Ω–µ—Ç'}\n"
        text += f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n\n"
    
    keyboard = MenuKeyboards.user_search_results(users[:5])  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5
    await message.answer(text, reply_markup=keyboard)
    await state.clear()


@router.callback_query(F.data.startswith("admin:user:"))
@require_role(["admin"])
async def user_actions(callback: CallbackQuery, session: AsyncSession):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = int(callback.data.split(":")[2])
    
    user_service = UserService(session)
    user = await user_service.get_by_id(user_id)
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    roles = ", ".join([r.name for r in user.roles])
    
    text = f"""
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}</b>

ID: {user.id}
Telegram ID: {user.telegram_id or '–Ω–µ—Ç'}
Username: @{user.username or '–Ω–µ—Ç'}
–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ—Ç'}
Email: {user.email or '–Ω–µ—Ç'}

–†–æ–ª–∏: {roles or '–Ω–µ—Ç'}
–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –î–∞' if user.is_verified else '‚ùå –ù–µ—Ç'}

–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}
–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {user.last_login.strftime('%d.%m.%Y %H:%M') if user.last_login else '–Ω–∏–∫–æ–≥–¥–∞'}
    """
    
    keyboard = MenuKeyboards.user_actions(user_id, user.is_active)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("admin:user:toggle:"))
@require_role(["admin"])
async def toggle_user_status(callback: CallbackQuery, session: AsyncSession):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split(":")[3])
    
    user_service = UserService(session)
    user = await user_service.get_by_id(user_id)
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è
    if user.telegram_id == callback.from_user.id:
        await callback.answer("–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    user.is_active = not user.is_active
    await session.commit()
    
    status = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await user_actions(callback, session)


@router.callback_query(F.data.startswith("admin:user:roles:"))
@require_role(["admin"])
async def manage_user_roles(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split(":")[3])
    
    user_service = UserService(session)
    user = await user_service.get_by_id(user_id)
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
    roles_result = await session.execute(select(Role))
    all_roles = roles_result.scalars().all()
    
    user_roles = [r.name for r in user.roles]
    
    text = f"üë§ <b>–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}</b>\n\n"
    text += "–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:\n"
    
    for role in all_roles:
        if role.name in user_roles:
            text += f"‚úÖ {role.display_name or role.name}\n"
        else:
            text += f"‚¨ú {role.display_name or role.name}\n"
    
    await state.update_data(user_id=user_id)
    await state.set_state(AdminStates.waiting_for_role_assignment)
    
    text += "\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: manager, operator)</i>"
    text += "\n<i>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'clear' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π</i>"
    
    await callback.message.edit_text(
        text,
        reply_markup=MenuKeyboards.back_button(f"admin:user:{user_id}")
    )
    await callback.answer()


@router.message(AdminStates.waiting_for_role_assignment)
@require_role(["admin"])
async def process_role_assignment(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
    data = await state.get_data()
    user_id = data.get('user_id')
    
    user_service = UserService(session)
    
    if message.text.lower() == 'clear':
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–æ–ª–∏
        await user_service.assign_roles(user_id, [])
        await message.answer(
            "‚úÖ –í—Å–µ —Ä–æ–ª–∏ —É–¥–∞–ª–µ–Ω—ã",
            reply_markup=MenuKeyboards.back_button(f"admin:user:{user_id}")
        )
    else:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏
        role_names = [r.strip() for r in message.text.split(',')]
        
        try:
            await user_service.assign_roles(user_id, role_names)
            await message.answer(
                f"‚úÖ –†–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: {', '.join(role_names)}",
                reply_markup=MenuKeyboards.back_button(f"admin:user:{user_id}")
            )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=MenuKeyboards.back_button(f"admin:user:{user_id}")
            )
    
    await state.clear()


@router.callback_query(F.data == "admin:system")
@require_role(["admin"])
async def system_settings(callback: CallbackQuery, session: AsyncSession):
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db_size_query = "SELECT pg_database_size(current_database())"
    db_size_result = await session.execute(db_size_query)
    db_size = db_size_result.scalar() / 1024 / 1024  # –í –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    active_tasks = await session.execute(
        select(func.count(MachineTask.id)).where(
            MachineTask.status.in_([TaskStatus.ASSIGNED, TaskStatus.IN_PROGRESS])
        )
    )
    active_tasks = active_tasks.scalar()
    
    text = f"""
‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
–†–∞–∑–º–µ—Ä: {db_size:.1f} MB
–ë—ç–∫–∞–ø—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00

üîÑ <b>–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:</b>
–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_tasks}
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if True else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
2FA: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if False else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}
–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—É–¥–∏—Ç: –≤—á–µ—Ä–∞

üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
Uptime: 99.9%
–û—à–∏–±–æ–∫ –∑–∞ —Å—É—Ç–∫–∏: 0
    """
    
    keyboard = MenuKeyboards.system_settings()
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin:broadcast")
@require_role(["admin"])
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    
    await callback.message.edit_text(
        "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
        "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>",
        reply_markup=MenuKeyboards.back_button("admin:panel")
    )
    await callback.answer()


@router.message(AdminStates.waiting_for_broadcast_message)
@require_role(["admin"])
async def process_broadcast(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID
    users_query = select(User).where(
        User.telegram_id.isnot(None),
        User.is_active == True
    )
    users_result = await session.execute(users_query)
    users = users_result.scalars().all()
    
    sent = 0
    failed = 0
    
    status_message = await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user in users:
        try:
            await message.bot.send_message(
                user.telegram_id,
                f"üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n{broadcast_text}",
                parse_mode="HTML"
            )
            sent += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if sent % 10 == 0:
                await status_message.edit_text(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n‚ùå –û—à–∏–±–æ–∫: {failed}"
                )
                
        except Exception as e:
            failed += 1
            print(f"Failed to send to {user.telegram_id}: {e}")
    
    await status_message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üìã –í—Å–µ–≥–æ: {sent + failed}",
        reply_markup=MenuKeyboards.back_button("admin:panel")
    )
    
    await state.clear()


@router.callback_query(F.data == "admin:logs")
@require_role(["admin"])
async def show_logs(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    from src.db.models.user import AuditLog
    
    logs_query = select(AuditLog).order_by(
        AuditLog.created_at.desc()
    ).limit(10)
    
    logs_result = await session.execute(logs_query)
    logs = logs_result.scalars().all()
    
    text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
    
    if not logs:
        text += "–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    else:
        for log in logs:
            text += f"üïê {log.created_at.strftime('%d.%m %H:%M')}\n"
            text += f"üë§ {log.user.full_name if log.user else '–°–∏—Å—Ç–µ–º–∞'}\n"
            text += f"üìå {log.action}\n"
            if log.entity_type:
                text += f"üéØ {log.entity_type}#{log.entity_id}\n"
            text += "\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=MenuKeyboards.back_button("admin:system")
    )
    await callback.answer()


from src.bot.keyboards.inline import InlineKeyboardMarkup, InlineKeyboardButton

class MenuKeyboards:
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    
    @staticmethod
    def admin_panel() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin:system"),
                InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")
            ],
            [
                InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin:logs"),
                InlineKeyboardButton(text="üíæ –ë—ç–∫–∞–ø", callback_data="admin:backup")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
    
    @staticmethod
    def user_management() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="admin:users:list"),
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="admin:users:search")
            ],
            [
                InlineKeyboardButton(text="üë• –†–æ–ª–∏", callback_data="admin:users:roles"),
                InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin:users:blocked")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:panel")
            ]
        ])
    
    @staticmethod
    def user_actions(user_id: int, is_active: bool) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        toggle_text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if is_active else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data=f"admin:user:roles:{user_id}")
            ],
            [
                InlineKeyboardButton(text=toggle_text, callback_data=f"admin:user:toggle:{user_id}")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin:user:stats:{user_id}")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")
            ]
        ])