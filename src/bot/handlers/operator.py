from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from src.bot.keyboards.inline import OperatorKeyboards, MenuKeyboards
from src.services.task import TaskService
from src.services.user import UserService
from src.core.permissions import require_role

router = Router()


class TaskStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏"""
    waiting_for_photo = State()
    waiting_for_comment = State()
    waiting_for_problem_description = State()


@router.callback_query(F.data == "operator:tasks")
@require_role(["operator", "manager", "admin"])
async def show_operator_tasks(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    user_service = UserService(session)
    task_service = TaskService(session)
    
    user = await user_service.get_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    tasks = await task_service.get_user_active_tasks(user.id)
    
    if not tasks:
        text = "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>\n\nüòä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
        await callback.message.edit_text(
            text,
            reply_markup=MenuKeyboards.back_button("main_menu")
        )
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_data = []
        for task in tasks:
            task_info = {
                "id": task.id,
                "machine_name": f"{task.machine.code} - {task.machine.name}",
                "type": task.type.value,
                "completed": task.status == "completed"
            }
            tasks_data.append(task_info)
        
        text = f"üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>\n\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
        await callback.message.edit_text(
            text,
            reply_markup=OperatorKeyboards.task_list(tasks_data)
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("task:"))
async def handle_task_action(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π"""
    action_parts = callback.data.split(":")
    
    if len(action_parts) < 2:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    if action_parts[1] == "photo_before" and len(action_parts) == 3:
        # –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ "–¥–æ"
        task_id = int(action_parts[2])
        await state.update_data(task_id=task_id, photo_type="before")
        await state.set_state(TaskStates.waiting_for_photo)
        
        await callback.message.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –î–û –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await callback.answer()
        
    elif action_parts[1] == "photo_after" and len(action_parts) == 3:
        # –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ "–ø–æ—Å–ª–µ"
        task_id = int(action_parts[2])
        await state.update_data(task_id=task_id, photo_type="after")
        await state.set_state(TaskStates.waiting_for_photo)
        
        await callback.message.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –ü–û–°–õ–ï –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await callback.answer()
        
    elif action_parts[1] == "comment" and len(action_parts) == 3:
        # –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        task_id = int(action_parts[2])
        await state.update_data(task_id=task_id)
        await state.set_state(TaskStates.waiting_for_comment)
        
        await callback.message.answer(
            "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await callback.answer()
        
    elif action_parts[1] == "problem" and len(action_parts) == 3:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
        task_id = int(action_parts[2])
        await state.update_data(task_id=task_id)
        await state.set_state(TaskStates.waiting_for_problem_description)
        
        await callback.message.answer(
            "‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É.\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await callback.answer()
        
    elif action_parts[1] == "complete" and len(action_parts) == 3:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_id = int(action_parts[2])
        task_service = TaskService(session)
        
        try:
            await task_service.complete_task(task_id)
            await callback.message.edit_text(
                "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=MenuKeyboards.back_button("operator:tasks")
            )
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            
    elif len(action_parts) == 2 and action_parts[1].isdigit():
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
        task_id = int(action_parts[1])
        task_service = TaskService(session)
        
        task = await task_service.get_task_details(task_id)
        if not task:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        status_emoji = {
            "pending": "‚è≥",
            "assigned": "üë§",
            "in_progress": "üîÑ",
            "completed": "‚úÖ",
            "cancelled": "‚ùå",
            "failed": "‚ö†Ô∏è"
        }.get(task.status.value, "‚ùì")
        
        task_text = f"""
{status_emoji} <b>–ó–∞–¥–∞—á–∞ #{task.id}</b>

<b>–¢–∏–ø:</b> {task.type.value}
<b>–ê–≤—Ç–æ–º–∞—Ç:</b> {task.machine.code} - {task.machine.name}
<b>–ê–¥—Ä–µ—Å:</b> {task.machine.location_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>–°—Ç–∞—Ç—É—Å:</b> {task.status.value}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}

<b>–°–æ–∑–¥–∞–Ω–∞:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}
"""
        
        if task.items:
            task_text += "\n<b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n"
            for item in task.items:
                task_text += f"‚Ä¢ {item.ingredient.name}: {item.planned_quantity} {item.ingredient.unit}\n"
        
        await callback.message.edit_text(
            task_text,
            reply_markup=OperatorKeyboards.task_actions(
                task_id,
                completed=task.status.value == "completed"
            )
        )
        await callback.answer()


@router.message(TaskStates.waiting_for_photo)
async def process_task_photo(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    
    data = await state.get_data()
    task_id = data.get("task_id")
    photo_type = data.get("photo_type")
    
    # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo: PhotoSize = message.photo[-1]
    
    task_service = TaskService(session)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        await task_service.add_task_photo(
            task_id=task_id,
            photo_type=photo_type,
            telegram_file_id=photo.file_id,
            caption=message.caption
        )
        
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ '{photo_type}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            reply_markup=OperatorKeyboards.task_actions(task_id)
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}")


@router.message(TaskStates.waiting_for_comment)
async def process_task_comment(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ"""
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        return
    
    data = await state.get_data()
    task_id = data.get("task_id")
    
    task_service = TaskService(session)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ
        await task_service.add_task_comment(task_id, message.text)
        
        await message.answer(
            "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=OperatorKeyboards.task_actions(task_id)
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}")


@router.message(TaskStates.waiting_for_problem_description)
async def process_problem_description(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    data = await state.get_data()
    task_id = data.get("task_id")
    
    task_service = TaskService(session)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É –∫ –∑–∞–¥–∞—á–µ
        await task_service.report_problem(
            task_id=task_id,
            problem_type="other",  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
            description=message.text,
            is_critical=False  # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        )
        
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            reply_markup=OperatorKeyboards.task_actions(task_id)
        )
        await state.clear()
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã: {str(e)}")


@router.callback_query(F.data == "operator:routes")
@require_role(["operator", "manager", "admin"])
async def show_operator_routes(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    await callback.message.edit_text(
        "üó∫ <b>–ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã</b>\n\n"
        "<i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        reply_markup=MenuKeyboards.back_button("main_menu")
    )
    await callback.answer()


@router.callback_query(F.data == "operator:report")
@require_role(["operator", "manager", "admin"])
async def create_operator_report(callback: CallbackQuery, session: AsyncSession):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    await callback.message.edit_text(
        "üì∏ <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞</b>\n\n"
        "<i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        reply_markup=MenuKeyboards.back_button("main_menu")
    )
    await callback.answer()