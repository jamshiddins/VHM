# src/bot/handlers/operator.py

from typing import Optional
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from ...services import (
    TaskService, RouteService, BagService, 
    CashCollectionService, VehicleService
)
from ...db.database import get_db
from ...db.schemas import (
    TaskPhotoCreate, TaskProblemCreate,
    CashDenominationCreate, VehicleLogCreate
)
from ..keyboards import operator as kb
from ..utils import require_role, photo_handler
from ...utils.storage import StorageService

router = Router()


class OperatorStates(StatesGroup):
    # –ó–∞–¥–∞—á–∏
    viewing_tasks = State()
    performing_task = State()
    reporting_problem = State()
    
    # –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è
    cash_collection_start = State()
    cash_collection_denominations = State()
    cash_collection_complete = State()
    
    # –°—É–º–∫–∏
    checking_bag = State()
    bag_verification = State()
    
    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    vehicle_mileage = State()
    vehicle_fuel = State()
    
    # –í–≤–æ–¥ –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º
    historical_entry = State()
    historical_date = State()


@router.message(Command("operator"))
@require_role("operator")
async def operator_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    await state.clear()
    await message.answer(
        "üë∑ –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.operator_main_menu()
    )


# === –ó–ê–î–ê–ß–ò –ò –ú–ê–†–®–†–£–¢–´ ===

@router.callback_query(F.data == "op_my_tasks")
@require_role("operator")
async def show_my_tasks(
    callback: CallbackQuery, 
    state: FSMContext,
    session: AsyncSession
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    await callback.answer()
    await state.set_state(OperatorStates.viewing_tasks)
    
    service = RouteService()
    routes = await service.get_operator_routes(
        db=session,
        operator_id=callback.from_user.id,
        status='assigned'
    )
    
    if not routes:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
            reply_markup=kb.back_to_operator_menu()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    text = "üìã <b>–í–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n\n"
    for route in routes:
        text += f"üöõ –ú–∞—Ä—à—Ä—É—Ç #{route.id} –Ω–∞ {route.date.strftime('%d.%m.%Y')}\n"
        text += f"–ó–∞–¥–∞—á: {len(route.tasks)}\n"
        text += f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {route.total_distance:.1f} –∫–º\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.routes_list(routes),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("route_"))
@require_role("operator")
async def show_route_details(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
    route_id = int(callback.data.split("_")[1])
    
    service = RouteService()
    progress = await service.get_route_progress(session, route_id)
    
    text = f"üöõ <b>–ú–∞—Ä—à—Ä—É—Ç #{route_id}</b>\n\n"
    text += f"–°—Ç–∞—Ç—É—Å: {progress['status']}\n"
    text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['completed_tasks']}/{progress['total_tasks']} "
    text += f"({progress['completion_percentage']:.0f}%)\n\n"
    
    text += "<b>–ó–∞–¥–∞—á–∏:</b>\n"
    for task in progress['tasks']:
        status_icon = "‚úÖ" if task['status'] == 'completed' else "‚è≥"
        text += f"{status_icon} {task['order']}. {task['machine']['name']}\n"
        text += f"   üìç {task['machine']['location']}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.route_actions(route_id, progress['status']),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("start_route_"))
@require_role("operator")
async def start_route(
    callback: CallbackQuery,
    session: AsyncSession
):
    """–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
    route_id = int(callback.data.split("_")[2])
    
    service = RouteService()
    route = await service.start_route(
        db=session,
        route_id=route_id,
        operator_id=callback.from_user.id
    )
    
    await callback.answer("‚úÖ –ú–∞—Ä—à—Ä—É—Ç –Ω–∞—á–∞—Ç!")
    await show_route_details(callback, None, session)


# === –ü–†–û–í–ï–†–ö–ê –°–£–ú–ö–ò ===

@router.callback_query(F.data.startswith("check_bag_"))
@require_role("operator")
async def start_bag_check(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–∫–∏"""
    task_id = int(callback.data.split("_")[2])
    
    await state.update_data(task_id=task_id)
    await state.set_state(OperatorStates.checking_bag)
    
    await callback.message.answer(
        "üì¶ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–∫–∏-–∫–æ–º–ø–ª–µ–∫—Ç–∞</b>\n\n"
        "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–º–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
        parse_mode="HTML"
    )


@router.message(
    OperatorStates.checking_bag,
    F.content_type == ContentType.PHOTO
)
@require_role("operator")
async def receive_bag_photo(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    storage: StorageService
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å—É–º–∫–∏"""
    data = await state.get_data()
    task_id = data['task_id']
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_url = await photo_handler.save_photo(
        message.photo[-1],
        folder=f"bags/{task_id}/check",
        storage=storage
    )
    
    await state.update_data(bag_photo=photo_url)
    await state.set_state(OperatorStates.bag_verification)
    
    await message.answer(
        "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É–º–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ?",
        reply_markup=kb.bag_verification_menu()
    )


@router.callback_query(
    F.data.in_(["bag_complete", "bag_incomplete"]),
    OperatorStates.bag_verification
)
@require_role("operator")
async def verify_bag_contents(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–∫–∏"""
    data = await state.get_data()
    is_complete = callback.data == "bag_complete"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏
    task_service = TaskService()
    task = await task_service.get(session, data['task_id'])
    
    if not task or not task.bag_id:
        await callback.answer("‚ùå –°—É–º–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–∫–∏
    bag_service = BagService()
    bag = await bag_service.verify_bag_by_operator(
        db=session,
        bag_id=task.bag_id,
        operator_id=callback.from_user.id,
        photo_url=data['bag_photo'],
        is_complete=is_complete,
        missing_items=[]  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    )
    
    await callback.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.clear()
    
    if is_complete:
        text = "‚úÖ –°—É–º–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ"
    else:
        text = "‚ö†Ô∏è –°—É–º–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã"
    
    await callback.message.answer(
        text,
        reply_markup=kb.back_to_operator_menu()
    )


# === –ò–ù–ö–ê–°–°–ê–¶–ò–Ø ===

@router.callback_query(F.data == "op_cash_collection")
@require_role("operator")
async def start_cash_collection_menu(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ú–µ–Ω—é –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "üí∞ <b>–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:",
        reply_markup=kb.select_machine_for_collection(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("collect_machine_"))
@require_role("operator")
async def select_machine_for_collection(
    callback: CallbackQuery,
    state: FSMContext
):
    """–í—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏"""
    machine_id = int(callback.data.split("_")[2])
    
    await state.update_data(machine_id=machine_id)
    await state.set_state(OperatorStates.cash_collection_start)
    
    await callback.message.answer(
        "üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∫–∞—Å—Å–µ—Ç—É –î–û –∏–∑—ä—è—Ç–∏—è –¥–µ–Ω–µ–≥",
        reply_markup=kb.cancel_button()
    )


@router.message(
    OperatorStates.cash_collection_start,
    F.content_type == ContentType.PHOTO
)
@require_role("operator")
async def receive_before_photo(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    storage: StorageService
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–æ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_url = await photo_handler.save_photo(
        message.photo[-1],
        folder=f"cash_collection/{data['machine_id']}/before",
        storage=storage
    )
    
    # –ù–∞—á–∞–ª–æ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
    service = CashCollectionService()
    collection = await service.start_collection(
        db=session,
        machine_id=data['machine_id'],
        operator_id=message.from_user.id,
        before_photo_url=photo_url
    )
    
    await state.update_data(collection_id=collection.id)
    await state.set_state(OperatorStates.cash_collection_denominations)
    
    await message.answer(
        "üíµ <b>–ü–æ–¥—Å—á–µ—Ç –∫—É–ø—é—Ä</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø—é—Ä –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º:\n\n"
        "–§–æ—Ä–º–∞—Ç: –Ω–æ–º–∏–Ω–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 10\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=kb.cash_denominations_menu(),
        parse_mode="HTML"
    )
    
    await state.update_data(denominations=[])


@router.message(
    OperatorStates.cash_collection_denominations,
    F.text.regexp(r"^\d+\s+\d+$")
)
@require_role("operator")
async def add_denomination(
    message: Message,
    state: FSMContext
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞"""
    parts = message.text.split()
    denomination = int(parts[0])
    quantity = int(parts[1])
    
    data = await state.get_data()
    denominations = data.get('denominations', [])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞
    found = False
    for d in denominations:
        if d['denomination'] == denomination:
            d['quantity'] += quantity
            found = True
            break
    
    if not found:
        denominations.append({
            'denomination': denomination,
            'quantity': quantity
        })
    
    await state.update_data(denominations=denominations)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É
    total = sum(d['denomination'] * d['quantity'] for d in denominations)
    
    text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {denomination} x {quantity}\n\n"
    text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:,} —Å—É–º\n\n"
    text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∫—É–ø—é—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'"
    
    await message.answer(text, reply_markup=kb.cash_denominations_menu())


@router.callback_query(
    F.data == "cash_done",
    OperatorStates.cash_collection_denominations
)
@require_role("operator")
async def save_denominations(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–ø—é—Ä"""
    data = await state.get_data()
    denominations = data.get('denominations', [])
    
    if not denominations:
        await callback.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫—É–ø—é—Ä—É", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–æ–≤
    service = CashCollectionService()
    collection = await service.add_denominations(
        db=session,
        collection_id=data['collection_id'],
        denominations=[
            CashDenominationCreate(**d) for d in denominations
        ],
        operator_id=callback.from_user.id
    )
    
    await state.set_state(OperatorStates.cash_collection_complete)
    
    total = sum(d['denomination'] * d['quantity'] for d in denominations)
    
    await callback.message.answer(
        f"üí∞ –°–æ–±—Ä–∞–Ω–æ: {total:,} —Å—É–º\n\n"
        "üì∏ –¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∫–∞—Å—Å–µ—Ç—É –ü–û–°–õ–ï –∏–∑—ä—è—Ç–∏—è –¥–µ–Ω–µ–≥",
        reply_markup=kb.cancel_button()
    )


@router.message(
    OperatorStates.cash_collection_complete,
    F.content_type == ContentType.PHOTO
)
@require_role("operator")
async def receive_after_photo(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    storage: StorageService
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_url = await photo_handler.save_photo(
        message.photo[-1],
        folder=f"cash_collection/{data['collection_id']}/after",
        storage=storage
    )
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏
    service = CashCollectionService()
    collection = await service.complete_collection(
        db=session,
        collection_id=data['collection_id'],
        operator_id=message.from_user.id,
        after_photo_url=photo_url,
        notes=None
    )
    
    await state.clear()
    
    text = "‚úÖ <b>–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
    text += f"üí∞ –°–æ–±—Ä–∞–Ω–æ: {collection.amount_collected:,} —Å—É–º\n"
    if collection.expected_amount:
        text += f"üìä –û–∂–∏–¥–∞–ª–æ—Å—å: {collection.expected_amount:,} —Å—É–º\n"
        if collection.discrepancy:
            text += f"‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {collection.discrepancy:,} —Å—É–º\n"
    
    await message.answer(
        text,
        reply_markup=kb.back_to_operator_menu(),
        parse_mode="HTML"
    )


# === –ñ–£–†–ù–ê–õ –¢–†–ê–ù–°–ü–û–†–¢–ê ===

@router.callback_query(F.data == "op_vehicle_log")
@require_role("operator")
async def vehicle_log_menu(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ú–µ–Ω—é –∂—É—Ä–Ω–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    await callback.answer()
    await callback.message.edit_text(
        "üöó <b>–ñ—É—Ä–Ω–∞–ª —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.vehicle_log_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "vehicle_mileage")
@require_role("operator")
async def start_mileage_entry(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–±–µ–≥–∞"""
    await state.set_state(OperatorStates.vehicle_mileage)
    await state.update_data(step="odometer")
    
    await callback.message.answer(
        "üìè <b>–í–≤–æ–¥ –ø—Ä–æ–±–µ–≥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ (–∫–º):",
        parse_mode="HTML"
    )


@router.message(
    OperatorStates.vehicle_mileage,
    F.text.regexp(r"^\d+$")
)
@require_role("operator")
async def receive_odometer_reading(
    message: Message,
    state: FSMContext
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä–∞"""
    odometer = int(message.text)
    await state.update_data(odometer_reading=odometer)
    
    await message.answer(
        "üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞"
    )


@router.message(
    OperatorStates.vehicle_mileage,
    F.content_type == ContentType.PHOTO
)
@require_role("operator")
async def receive_odometer_photo(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    storage: StorageService
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_url = await photo_handler.save_photo(
        message.photo[-1],
        folder="vehicles/odometer",
        storage=storage
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–±–µ–≥–µ
    service = VehicleService()
    log = await service.add_mileage_log(
        db=session,
        vehicle_id=1,  # TODO: –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        log_data=VehicleLogCreate(
            odometer_reading=data['odometer_reading'],
            log_date=datetime.now(timezone.utc)
        ),
        driver_id=message.from_user.id,
        odometer_photo=photo_url
    )
    
    await state.clear()
    
    text = "‚úÖ <b>–ü—Ä–æ–±–µ–≥ –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
    text += f"üìè –ü–æ–∫–∞–∑–∞–Ω–∏—è: {log.odometer_reading:,} –∫–º\n"
    if log.mileage:
        text += f"üöó –ü—Ä–æ–±–µ–≥ –∑–∞ –ø–µ—Ä–∏–æ–¥: {log.mileage} –∫–º\n"
    
    await message.answer(
        text,
        reply_markup=kb.back_to_operator_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "vehicle_fuel")
@require_role("operator")
async def start_fuel_entry(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –∑–∞–ø—Ä–∞–≤–∫–∏"""
    await state.set_state(OperatorStates.vehicle_fuel)
    await state.update_data(step="liters")
    
    await callback.message.answer(
        "‚õΩ <b>–ó–∞–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤:",
        parse_mode="HTML"
    )


@router.message(
    OperatorStates.vehicle_fuel,
    F.text.regexp(r"^\d+\.?\d*$")
)
@require_role("operator")
async def receive_fuel_data(
    message: Message,
    state: FSMContext
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–∞–≤–∫–µ"""
    data = await state.get_data()
    step = data.get('step')
    
    if step == "liters":
        liters = float(message.text)
        await state.update_data(fuel_amount=liters, step="cost")
        await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ (—Å—É–º):")
        
    elif step == "cost":
        cost = float(message.text)
        await state.update_data(fuel_cost=cost, step="station")
        await message.answer("‚õΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ê–ó–°:")
        
    elif step == "station":
        station = message.text
        await state.update_data(fuel_station=station, step="photo")
        await message.answer("üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —á–µ–∫ —Å –∑–∞–ø—Ä–∞–≤–∫–∏:")


@router.message(
    OperatorStates.vehicle_fuel,
    F.content_type == ContentType.PHOTO
)
@require_role("operator")
async def receive_fuel_receipt(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    storage: StorageService
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ–∫–∞"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_url = await photo_handler.save_photo(
        message.photo[-1],
        folder="vehicles/receipts",
        storage=storage
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—Ä–∞–≤–∫–µ
    service = VehicleService()
    log = await service.add_fuel_log(
        db=session,
        vehicle_id=1,  # TODO: –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        log_data=VehicleLogCreate(
            fuel_amount=data['fuel_amount'],
            fuel_cost=data['fuel_cost'],
            fuel_station=data['fuel_station'],
            log_date=datetime.now(timezone.utc)
        ),
        driver_id=message.from_user.id,
        receipt_photo=photo_url
    )
    
    await state.clear()
    
    text = "‚úÖ <b>–ó–∞–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!</b>\n\n"
    text += f"‚õΩ –õ–∏—Ç—Ä–æ–≤: {log.fuel_amount}\n"
    text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {log.fuel_cost:,} —Å—É–º\n"
    text += f"üí∞ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä: {log.fuel_price_per_liter:,.0f} —Å—É–º\n"
    text += f"üìç –ê–ó–°: {log.fuel_station}\n"
    
    await message.answer(
        text,
        reply_markup=kb.back_to_operator_menu(),
        parse_mode="HTML"
    )


# === –í–í–û–î –ó–ê–î–ù–ò–ú –ß–ò–°–õ–û–ú ===

@router.callback_query(F.data == "op_historical")
@require_role("operator")
async def historical_entry_menu(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ú–µ–Ω—é –≤–≤–æ–¥–∞ –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º"""
    await callback.answer()
    await callback.message.edit_text(
        "üìÖ <b>–í–≤–æ–¥ –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=kb.historical_entry_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("hist_"))
@require_role("operator")
async def select_historical_type(
    callback: CallbackQuery,
    state: FSMContext
):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    operation_type = callback.data.replace("hist_", "")
    
    await state.update_data(historical_type=operation_type)
    await state.set_state(OperatorStates.historical_date)
    
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.03.2024"
    )


@router.message(
    OperatorStates.historical_date,
    F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$")
)
@require_role("operator")
async def receive_historical_date(
    message: Message,
    state: FSMContext
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –¥–∞—Ç—ã"""
    try:
        date_parts = message.text.split('.')
        historical_date = datetime(
            year=int(date_parts[2]),
            month=int(date_parts[1]),
            day=int(date_parts[0]),
            tzinfo=timezone.utc
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
        if historical_date > datetime.now(timezone.utc):
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!",
                reply_markup=kb.cancel_button()
            )
            return
        
        await state.update_data(historical_date=historical_date)
        
        data = await state.get_data()
        operation_type = data['historical_type']
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if operation_type == "task":
            await message.answer(
                "üìã –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–µ –∑–∞ —ç—Ç—É –¥–∞—Ç—É..."
            )
            # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
            
        elif operation_type == "collection":
            await message.answer(
                "üí∞ –ù–∞—á–Ω–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ –∑–∞ —ç—Ç—É –¥–∞—Ç—É..."
            )
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—ã—á–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ —Å historical_date
            await state.set_state(OperatorStates.cash_collection_start)
            
        elif operation_type == "mileage":
            await message.answer(
                "üöó –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É..."
            )
            await state.set_state(OperatorStates.vehicle_mileage)
            
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
            reply_markup=kb.cancel_button()
        )


# === –ü–†–û–ë–õ–ï–ú–´ ===

@router.callback_query(F.data.startswith("report_problem_"))
@require_role("operator")
async def start_problem_report(
    callback: CallbackQuery,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    task_id = int(callback.data.split("_")[2])
    
    await state.update_data(task_id=task_id)
    await state.set_state(OperatorStates.reporting_problem)
    
    await callback.message.answer(
        "‚ö†Ô∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=kb.problem_types(),
        parse_mode="HTML"
    )


@router.callback_query(
    F.data.startswith("problem_type_"),
    OperatorStates.reporting_problem
)
@require_role("operator")
async def select_problem_type(
    callback: CallbackQuery,
    state: FSMContext
):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
    problem_type = callback.data.replace("problem_type_", "")
    
    await state.update_data(problem_type=problem_type)
    
    await callback.message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"
    )


@router.message(
    OperatorStates.reporting_problem,
    F.text
)
@require_role("operator")
async def receive_problem_description(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    service = TaskService()
    problem = await service.report_problem(
        db=session,
        task_id=data['task_id'],
        problem_data=TaskProblemCreate(
            problem_type=data['problem_type'],
            description=message.text,
            is_critical=data['problem_type'] in ['machine_broken', 'no_access']
        ),
        reported_by_id=message.from_user.id
    )
    
    await state.clear()
    
    await message.answer(
        "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.",
        reply_markup=kb.back_to_operator_menu()
    )


# === –û–¢–ú–ï–ù–ê ===

@router.callback_query(F.data == "cancel")
async def cancel_operation(
    callback: CallbackQuery,
    state: FSMContext
):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await operator_menu(callback.message, state)