#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö VendHub
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from src.db.database import engine, init_db
from src.db.base import Base
from src.db.models import *  # noqa: F401, F403
from src.core.permissions import DEFAULT_ROLE_PERMISSIONS
from sqlalchemy import text


async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        await init_db()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False
    
    return True


async def create_default_roles():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
    
    from src.db.database import async_session_maker
    from src.db.models.user import Role, Permission
    from sqlalchemy import select
    
    async with async_session_maker() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
            roles_data = [
                ("admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ"),
                ("manager", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏"),
                ("warehouse", "–°–∫–ª–∞–¥", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏"),
                ("operator", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–æ–≤"),
                ("investor", "–ò–Ω–≤–µ—Å—Ç–æ—Ä", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –æ—Ç—á–µ—Ç–æ–≤")
            ]
            
            for role_name, display_name, description in roles_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
                existing_role = await session.execute(
                    select(Role).where(Role.name == role_name)
                )
                if not existing_role.scalar_one_or_none():
                    role = Role(
                        name=role_name,
                        display_name=display_name,
                        description=description,
                        is_system=True
                    )
                    session.add(role)
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {role_name}")
            
            await session.commit()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            print("\nüîê –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
            permissions_set = set()
            
            for role_name, permissions in DEFAULT_ROLE_PERMISSIONS.items():
                for perm in permissions:
                    if perm == "*:*":
                        continue  # –û—Å–æ–±–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
                    
                    module, action = perm.split(":")
                    permissions_set.add((module, action))
            
            for module, action in permissions_set:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                existing_perm = await session.execute(
                    select(Permission).where(
                        Permission.module == module,
                        Permission.action == action
                    )
                )
                if not existing_perm.scalar_one_or_none():
                    permission = Permission(
                        module=module,
                        action=action,
                        description=f"{action.title()} {module}"
                    )
                    session.add(permission)
            
            await session.commit()
            print("  ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª—è–º
            print("\nüîó –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª—è–º...")
            
            for role_name, permissions in DEFAULT_ROLE_PERMISSIONS.items():
                if role_name == "admin":
                    continue  # –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
                role_result = await session.execute(
                    select(Role).where(Role.name == role_name)
                )
                role = role_result.scalar_one_or_none()
                
                if role:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                    for perm_str in permissions:
                        module, action = perm_str.split(":")
                        perm_result = await session.execute(
                            select(Permission).where(
                                Permission.module == module,
                                Permission.action == action
                            )
                        )
                        permission = perm_result.scalar_one_or_none()
                        
                        if permission and permission not in role.permissions:
                            role.permissions.append(permission)
                    
                    print(f"  ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏: {role_name}")
            
            await session.commit()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")
            return False
    
    return True


async def create_default_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    from src.db.database import async_session_maker
    from src.db.models.finance import FinanceAccount
    from src.db.models.inventory import Warehouse
    
    async with async_session_maker() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—á–µ—Ç–∞
            accounts = [
                ("cash_main", "–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞", "cash"),
                ("bank_main", "–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç", "bank"),
                ("payme", "PayMe –∫–æ—à–µ–ª–µ–∫", "wallet"),
                ("click", "Click –∫–æ—à–µ–ª–µ–∫", "wallet"),
                ("uzum", "Uzum –∫–æ—à–µ–ª–µ–∫", "wallet")
            ]
            
            for code, name, acc_type in accounts:
                account = FinanceAccount(
                    code=code,
                    name=name,
                    type=acc_type,
                    currency="UZS",
                    balance=0,
                    is_active=True
                )
                session.add(account)
            
            print("  ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—á–µ—Ç–∞")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥
            warehouse = Warehouse(
                code="main",
                name="–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥",
                address="–≥. –¢–∞—à–∫–µ–Ω—Ç",
                is_active=True
            )
            session.add(warehouse)
            print("  ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥")
            
            await session.commit()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö VendHub")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT 1"))
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    if not await create_tables():
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    if not await create_default_roles():
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not await create_default_data():
        return
    
    print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: python scripts/create_admin.py")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: uvicorn src.main:app --reload")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python -m src.bot.bot")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")